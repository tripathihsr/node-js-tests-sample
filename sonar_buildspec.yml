version: 0.2

env:
  variables:
    SONAR_HOST_URL: "YOUR_SONAR_HOST_URL"
  secrets-manager:
    SONAR_TOKEN: "sonar-secret:token"

phases:
  install:
    runtime-versions:
      java: corretto11      # Required for SonarScanner
      #python: 3.11         # If analyzing Python code
      nodejs: 16          # If analyzing JavaScript/TypeScript
    commands:
      # Install SonarScanner
      - wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
      - unzip sonar-scanner-cli-4.8.0.2856-linux.zip
      - export PATH=$PATH:./sonar-scanner-4.8.0.2856-linux/bin/

  pre_build:
    commands:
      # Install dependencies based on your project type
      # For Python
      #- pip install -r requirements.txt
      
      # For Node.js
      # - npm install
      
      # For Java/Maven
      # - mvn clean install
      
      # Generate coverage reports (example for Python using coverage.py)
      #- pip install coverage
      - coverage run -m pytest
      - coverage xml -o coverage-reports/coverage.xml

  build:
    commands:
      # Run SonarQube analysis
      - sonar-scanner \
        -Dsonar.projectKey=your-project-key \
        -Dsonar.sources=. \
        -Dsonar.host.url=$SONAR_HOST_URL \
        -Dsonar.token=$SONAR_TOKEN \
        -Dsonar.python.coverage.reportPaths=coverage-reports/coverage.xml \
        -Dsonar.sourceEncoding=UTF-8 \
        -Dsonar.exclusions=**/tests/**,**/*.pyc,**/__pycache__/**,**/venv/** \
        -Dsonar.qualitygate.wait=true

  post_build:
    commands:
      - |
        if [ $CODEBUILD_BUILD_SUCCEEDING = 1 ]; then
          echo "SonarQube analysis completed successfully"
        else
          echo "SonarQube analysis failed"
          exit 1
        fi

reports:
  sonarqube-report:
    files:
      - '**/*'
    base-directory: '.scannerwork'
    discard-paths: yes

cache:
  paths:
    - '/root/.m2/**/*'
    - '/root/.sonar/**/*'
    - 'node_modules/**/*'
    - '.scannerwork/**/*'
